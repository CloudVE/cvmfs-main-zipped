<tool id="iterative_map_pipeline" name="Iterative Mapping" version="1.0">
	<description>iteratively maps the raw reads of RNA structural data to the reference transcriptome</description>
	<command interpreter="python">
        #if $mapping_file.type == "user"
            iterative_map.py $file_format.type $file_format.seq_file $reference_file $shift $length $t_end $mapping_file.type $output $mapping_file.param_v $mapping_file.param_five $mapping_file.param_three $mapping_file.param_k $mapping_file.param_a $mapping_file.param_m $mapping_file.param_best  
        #else
            iterative_map.py $file_format.type $file_format.seq_file $reference_file $shift $length $t_end $mapping_file.type $output
        #end if
    </command>
        <requirements>
                <requirement type="package" version="1.61">biopython</requirement>
                <requirement type="package" version="1.7.1">numpy</requirement>
                <requirement type="package" version="0.1.18">samtools</requirement>
                <requirement type="package" version="0.12.7">bowtie</requirement>
        </requirements>
	<inputs>
                <conditional name="file_format">
                  <param name="type" type="select" label="File format of the reads (Default FASTQ)">
                    <option value="fastq">FASTQ</option>
                    <option value="fasta">FASTA</option>
                  </param>
                  <when value="fastq">
                    <param name="seq_file" type="data" format="fastq" label="Fastq file"/>
                  </when>
                  <when value="fasta">
                    <param name="seq_file" type="data" format="fasta" label="Fasta file"/>
                  </when>
                </conditional>
		        <param name="reference_file" type="data" format="fasta" label="Reference genome/transcriptome"/>
                <param name="shift" type="integer" value="1" label="Number of nucleotides trimmed each round"/>
                <param name="length" type="integer" value="21" label="Minimum requirement of read length for mapping"/>
                <param name="t_end" type="select" label="Trimming end">
                    <option value="five_end">5' end</option>
                    <option value="three_end">3' end</option>
                </param>
                
                <conditional name="mapping_file">
                  <param name="type" type="select" label="Bowtie mapping flags (Default -v 0 -a --best --strata)">
                    <option value="default">Default</option>
                    <option value="user">User specified</option>
                  </param>
                  <when value="default"/>
                  <when value="user"> 
                    <param name="param_v" type="integer" value="0" label="Number of mismatches for SOAP-like alignment policy (-v)"/>
                    <param name="param_five" type="integer" value="0" label="Trim n bases from high-quality (left) end of each read before alignment (-5)"/>
                    <param name="param_three" type="integer" value="0" label="Trim n bases from high-quality (right) end of each read before alignment (-3)"/>
                    <param name="param_k" type="integer" value="1" label="Report up to n valid alignments per read (-k)"/>
                    <param name="param_a" type="boolean" checked="False" truevalue = "1" falsevalue = "0" label="Whether or not to report all valid alignments per read (-a)"/>
                    <param name="param_m" type="integer" value="-1" label="Suppress all alignments for a read if more than n reportable alignments exist (-m), -1 for unlimited"/>
                    <param name="param_best" type="boolean" checked="False" truevalue = "1" falsevalue = "0" label="Whether or not to make Bowtie guarantee that reported singleton alignments are 'best' in terms of stratum and in terms of the quality values at the mismatched positions (--best --strata)"/>
                  </when>
                </conditional>

	</inputs>
	<outputs>
		<data name="output" type="data" format="bam"/>
	</outputs>
    <tests>
        <test>
            <param name="file_format.type" value="fasta" />
            <param name="file_format.seq_file" value="sample.fasta" />
	        <param name="reference_file" value="rRNA.txt" />
            <param name="shift" value="1" />
            <param name="length" value="21" />
            <param name="mapping_file.type" value="default" />
	        <output name="output" file="mapped.out" />
        </test>
    </tests>

	<help>


**Overview of StructureFold**

* StructureFold is a series of software packages that automates the process of predicting RNA secondary structure for a transcript or an entire transcriptome, with or without the inclusion of constraints on the structure(s) provided by wet bench experimentation. The process consists of mapping the raw reads of RNA structural data on every transcript in the dataset to the transcriptome, getting RT stop counts on each nucleotide, calculating structural reactivities on the nucleotides, and predicting the RNA structures. Please cite: Tang, Y, Bouvier, E, Kwok CK, Ding Y, Nekrutenko, A, Bevilacqua PC, Assmann SM, StructureFold: Genome-wide RNA secondary structure mapping and reconstruction in vivo, Bioinformatics, In press. RNA structure is predicted using the RNAstructure algorithm (http://rna.urmc.rochester.edu/RNAstructure.html) or ViennaRNA package (http://www.tbi.univie.ac.at/RNA/).

-----

**Function**

* Iterative Mapping maps the raw reads of RNA structural data to the reference transcriptome using Bowtie (v0.12.8). It allows users to trim each read from either end to iteratively map the read to the reference transcriptome. 

-----

**Input**:

* 1. Sequence file type (FASTA/FASTQ)
* 2. Sequence file (fasta/fastq format)
* 3. Reference file (fasta) used to map the reads to
* 4. “Shift” (The length of the sequence that will be trimmed at the 3’end of the reads before each round of mapping)
* 5. “Length” (The minimum length of the reads for mapping after trimming)
* [Optional]
* 1. Bowtie mapping flags (options) [Default: -v 0 -a --best --strata] (-v flag indicates the number of allowed mismatches. Use -5/-3 flag to trim the nucleotides from 5'/3' end of the reads)

-----

**Output**:

A sorted .bam file with all of the reads that are mapped



	</help>
</tool>
